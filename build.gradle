plugins {
  id 'net.researchgate.release' version '2.0.2'
}

group='edina.shared'
description="""Edina specific plugin to set defaults for all projects."""


configurations {
    deployerJars
}

repositories {
  jcenter()
  mavenLocal()
}



// Apply necessary plugins.
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'net.researchgate.release'

dependencies {
  compile gradleApi()
  compile localGroovy()
  compile 'net.researchgate:gradle-release:2.0.2'

  deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
}

release {
  // Prevent releases from master branch only.
  // This can be configured to specify releases from a particular branch only.
  requireBranch = ''
}

uploadArchives {
  repositories.mavenDeployer {
      configuration = configurations.deployerJars
      repository(url: edinaRepository) {
          authentication(userName: mavenUsername, password: mavenPassword)
      }
  }
}

// Ensure maven publish task is ran after java test task.
uploadArchives.dependsOn(test)
install.dependsOn(test)

createReleaseTag.dependsOn uploadArchives


// Uncomment to enable println statements in tests.
//test {
//  testLogging.showStandardStreams = true
//}
import org.gradle.logging.StyledTextOutput
import org.gradle.logging.StyledTextOutputFactory
import static org.gradle.logging.StyledTextOutput.Style

System.setProperty("org.gradle.color.failure", "RED")
System.setProperty("org.gradle.color.progressstatus", "YELLOW")
System.setProperty("org.gradle.color.success", "GREEN")

test {
  def out = services.get(StyledTextOutputFactory).create("colored-test-output")
  out.style(Style.Normal)

  beforeSuite { suite ->
    if (suite.name.startsWith("Test Run") || suite.name.startsWith("Gradle Worker")) return
    out.println("\n" + suite.name)
  }
  afterTest { descriptor, result ->
    def style
    if (result.failedTestCount > 0) style = Style.Failure
    else if (result.skippedTestCount > 0) style = Style.ProgressStatus
    else style = Style.Success

    out.text('  ').withStyle(style).println(descriptor.name)
  }
}
